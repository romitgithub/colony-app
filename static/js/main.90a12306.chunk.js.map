{"version":3,"sources":["app.module.css","services/blockies.js","containers/Events/events.module.css","components/EventCard/eventCard.module.css","constants/index.ts","components/EventCard/EventCard.tsx","components/EventsList/EventsList.tsx","services/ApiService.ts","services/ColonyClient.ts","services/utils.ts","containers/Events/Events.tsx","App.tsx","index.tsx","components/EventsList/eventsList.module.css"],"names":["module","exports","randseed","Array","rand","t","createColor","Math","floor","buildOpts","opts","newOpts","seed","random","pow","toString","i","length","charCodeAt","seedrand","size","scale","color","bgcolor","spotcolor","renderIcon","canvas","imageData","width","height","dataWidth","ceil","mirrorWidth","data","y","row","x","r","slice","reverse","concat","push","createImageData","sqrt","cc","getContext","fillStyle","fillRect","col","api","create","document","createElement","render","window","blockies","EventTypes","EventCard","getPrimaryText","event","primary","role","userAddress","domainId","amount","token","rewardPayoutId","symbol","type","className","styles","primaryText","this","props","imageUrl","avatarSeed","toDataURL","formattedDate","secondary","Date","toDateString","PrimaryText","card","avatar","src","alt","metaData","secondaryText","Component","EventsList","state","page","handleScroll","target","offsetHeight","scrollTop","scrollHeight","setState","getItems","eventsList","events","container","onScroll","list","map","index","key","React","apiService","getHeaders","Headers","get","url","options","a","getRequest","Request","method","headers","cache","fetch","then","response","status","json","Error","error","console","provider","InfuraProvider","networkClientOptions","networkAddress","TokenSymbolMapping","localStorage","getItem","JSON","parse","getTokenSymbolMap","connectedWallet","Wallet","createRandom","connect","getColonyClient","getColonyNetworkClient","Network","Mainnet","networkClient","colonyClient","getDate","blockHash","getBlockTime","date","getColonyRoleSetData","parsedEvent","ColonyRole","values","address","utils","BigNumber","getPayoutClaimedData","originalAmount","humanReadableAmount","wei","div","getAmount","fundingPotId","getSymbolFromToken","tokenInfo","setItem","stringify","undefined","processEventLogsData","eventLogs","parsedLogs","Promise","all","finalEventData","name","transactionHash","claimedData","sort","b","getEventLogs","eventFilter1","filters","PayoutClaimed","eventFilter2","ColonyInitialised","eventFilter3","ColonyRoleSet","eventFilter4","DomainAdded","getLogs","interface","parseLog","eventLogsData","Events","isLoading","App","app","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.90a12306.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__cewju\"};","(function () {\n  // The random number is a js implementation of the Xorshift PRNG\n  var randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n  function seedrand(seed) {\n    for (let i = 0; i < randseed.length; i++) {\n      randseed[i] = 0;\n    }\n    for (let i = 0; i < seed.length; i++) {\n      randseed[i % 4] =\n        (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n    }\n  }\n\n  function rand() {\n    // based on Java's String.hashCode(), expanded to 4 32bit values\n    var t = randseed[0] ^ (randseed[0] << 11);\n\n    randseed[0] = randseed[1];\n    randseed[1] = randseed[2];\n    randseed[2] = randseed[3];\n    randseed[3] = randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8);\n\n    return (randseed[3] >>> 0) / ((1 << 31) >>> 0);\n  }\n\n  function createColor() {\n    //saturation is the whole color spectrum\n    var h = Math.floor(rand() * 360);\n    //saturation goes from 40 to 100, it avoids greyish colors\n    var s = rand() * 60 + 40 + \"%\";\n    //lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n    var l = (rand() + rand() + rand() + rand()) * 25 + \"%\";\n\n    var color = \"hsl(\" + h + \",\" + s + \",\" + l + \")\";\n    return color;\n  }\n\n  function createImageData(size) {\n    var width = size; // Only support square icons for now\n    var height = size;\n\n    var dataWidth = Math.ceil(width / 2);\n    var mirrorWidth = width - dataWidth;\n\n    var data = [];\n    for (var y = 0; y < height; y++) {\n      var row = [];\n      for (var x = 0; x < dataWidth; x++) {\n        // this makes foreground and background color to have a 43% (1/2.3) probability\n        // spot color has 13% chance\n        row[x] = Math.floor(rand() * 2.3);\n      }\n      var r = row.slice(0, mirrorWidth);\n      r.reverse();\n      row = row.concat(r);\n\n      for (var i = 0; i < row.length; i++) {\n        data.push(row[i]);\n      }\n    }\n\n    return data;\n  }\n\n  function buildOpts(opts) {\n    var newOpts = {};\n\n    newOpts.seed =\n      opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);\n\n    seedrand(newOpts.seed);\n\n    newOpts.size = opts.size || 8;\n    newOpts.scale = opts.scale || 4;\n    newOpts.color = opts.color || createColor();\n    newOpts.bgcolor = opts.bgcolor || createColor();\n    newOpts.spotcolor = opts.spotcolor || createColor();\n\n    return newOpts;\n  }\n\n  function renderIcon(opts, canvas) {\n    opts = buildOpts(opts || {});\n    var imageData = createImageData(opts.size);\n    var width = Math.sqrt(imageData.length);\n\n    canvas.width = canvas.height = opts.size * opts.scale;\n\n    var cc = canvas.getContext(\"2d\");\n    cc.fillStyle = opts.bgcolor;\n    cc.fillRect(0, 0, canvas.width, canvas.height);\n    cc.fillStyle = opts.color;\n\n    for (var i = 0; i < imageData.length; i++) {\n      // if data is 0, leave the background\n      if (imageData[i]) {\n        var row = Math.floor(i / width);\n        var col = i % width;\n\n        // if data is 2, choose spot color, if 1 choose foreground\n        cc.fillStyle = imageData[i] === 1 ? opts.color : opts.spotcolor;\n\n        cc.fillRect(col * opts.scale, row * opts.scale, opts.scale, opts.scale);\n      }\n    }\n    return canvas;\n  }\n\n  function createIcon(opts) {\n    var canvas = document.createElement(\"canvas\");\n\n    renderIcon(opts, canvas);\n\n    return canvas;\n  }\n\n  var api = {\n    create: createIcon,\n    render: renderIcon,\n  };\n\n  if (typeof module !== \"undefined\") {\n    module.exports = api;\n  }\n  if (typeof window !== \"undefined\") {\n    window.blockies = api;\n  }\n})();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"events_container__1gPPA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"eventCard_card__1aROJ\",\"avatar\":\"eventCard_avatar__2ZpFM\",\"metaData\":\"eventCard_metaData__1TYIw\",\"primaryText\":\"eventCard_primaryText__22NV8\",\"secondaryText\":\"eventCard_secondaryText__3cKoX\"};","export const EventTypes: { [key: string]: string } = {\n  ColonyInitialised: \"ColonyInitialised\",\n  ColonyRoleSet: \"ColonyRoleSet\",\n  PayoutClaimed: \"PayoutClaimed\",\n  DomainAdded: \"DomainAdded\",\n};\n","import React, { Component } from \"react\";\nimport EventInterface from \"interfaces/Event.interface\";\nimport blockies from \"services/blockies\";\nimport { EventTypes } from \"../../constants\";\n\nimport styles from \"./eventCard.module.css\";\n\ninterface Props {\n  event: EventInterface;\n}\n\nexport default class EventCard extends Component<Props> {\n  getPrimaryText = (event: EventInterface) => {\n    const {\n      data,\n      role,\n      userAddress,\n      domainId,\n      amount,\n      token,\n      rewardPayoutId,\n      symbol,\n    } = event.primary;\n    switch (event.type) {\n      case EventTypes.ColonyInitialised:\n        return <div className={styles.primaryText}>{data}</div>;\n      case EventTypes.ColonyRoleSet:\n        return (\n          <div className={styles.primaryText}>\n            <span>{role}</span> role assigned to user <span>{userAddress}</span>{\" \"}\n            in domain <span>{domainId}</span>\n          </div>\n        );\n      case EventTypes.PayoutClaimed:\n        return (\n          <div className={styles.primaryText}>\n            User <span>{userAddress}</span> claimed{\" \"}\n            <span>\n              {amount}\n              {symbol ? symbol : token}\n            </span>{\" \"}\n            payout from pot <span>{rewardPayoutId}</span>\n          </div>\n        );\n      case EventTypes.DomainAdded:\n        return (\n          <div className={styles.primaryText}>\n            Domain <span>{domainId}</span> added.\n          </div>\n        );\n      default:\n        return <div className={styles.primaryText}>{event.primary}</div>;\n    }\n  };\n\n  render() {\n    const { event } = this.props;\n    const icon = blockies.create({\n      seed: event.avatarSeed,\n    });\n    const imageUrl = icon.toDataURL();\n    const formattedDate =\n      event.secondary !== -1 ? new Date(event.secondary).toDateString() : \"\";\n    const PrimaryText = this.getPrimaryText(event);\n    return (\n      <div className={styles.card}>\n        <img className={styles.avatar} src={imageUrl} alt=\"user-entropy-icon\" />\n\n        <div className={styles.metaData}>\n          {PrimaryText}\n          <div className={styles.secondaryText}>{formattedDate}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport EventInterface from \"interfaces/Event.interface\";\nimport EventCard from \"components/EventCard\";\n\nimport styles from \"./eventsList.module.css\";\n\ninterface Props {\n  eventsList: EventInterface[];\n}\n\nexport default class EventsList extends React.Component<Props> {\n  state = {\n    page: 0,\n  };\n\n  handleScroll = (event: any) => {\n    if (\n      event.target.offsetHeight + event.target.scrollTop ===\n      event.target.scrollHeight\n    ) {\n      this.setState({ page: this.state.page + 1 });\n    }\n  };\n\n  getItems = () => {\n    const { page } = this.state;\n    return this.props.eventsList.slice(0, (page + 1) * 10);\n  };\n\n  render() {\n    const events = this.getItems();\n    return (\n      <div className={styles.container} onScroll={this.handleScroll}>\n        <div className={styles.list}>\n          {events.map((event: EventInterface, index) => (\n            <EventCard event={event} key={index} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","class ApiService {\n  getHeaders = () => {\n    return new Headers({});\n  };\n\n  get = async (url: string, options: any) => {\n    const getRequest = new Request(url, {\n      method: \"GET\",\n      headers: { ...this.getHeaders(), ...options.headers },\n      cache: \"default\",\n    });\n\n    return fetch(getRequest).then(\n      (response) => {\n        if (response.status === 200) {\n          return response.json().then((data) => {\n            return data;\n          });\n        } else {\n          throw new Error(\"Failed to load data\");\n        }\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  };\n}\n\nconst apiService = new ApiService();\n\nexport default apiService;\n","import {\n  getColonyNetworkClient,\n  Network,\n  getLogs,\n  getBlockTime,\n  ColonyRole,\n} from \"@colony/colony-js\";\nimport { Wallet, utils } from \"ethers\";\nimport { InfuraProvider, Log } from \"ethers/providers\";\nimport { EventTypes } from \"../constants\";\nimport Event from \"interfaces/Event.interface\";\nimport apiService from \"./ApiService\";\nimport { getTokenSymbolMap, saveTokenSymbolMap } from \"./utils\";\nimport { LogDescription } from \"ethers/utils\";\n\n// Set up the network address constants that you'll be using\n// The two below represent the current ones on mainnet\n// Don't worry too much about them, just use them as-is\nconst MAINNET_NETWORK_ADDRESS = `0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef`;\nconst MAINNET_BETACOLONY_ADDRESS = `0x869814034d96544f3C62DE2aC22448ed79Ac8e70`;\n\nconst INFURA_NETWORK = \"homestead\";\nconst INFURA_PROJECT_ID = \"4c30d38bb01645a1bef9e70fbab10582\";\n\n// Get a new Infura provider (don't worry too much about this)\nconst provider = new InfuraProvider(INFURA_NETWORK, INFURA_PROJECT_ID);\n\nconst networkClientOptions = {\n  networkAddress: MAINNET_NETWORK_ADDRESS,\n};\n\nlet TokenSymbolMapping: { [key: string]: string } = getTokenSymbolMap();\n\n// Get a random wallet\n// You don't really need control over it, since you won't be firing any trasactions out of it\nconst wallet = Wallet.createRandom();\n// Connect your wallet to the provider\nconst connectedWallet = wallet.connect(provider);\n\nconst getColonyClient = async () => {\n  // Get a network client instance\n  const networkClient = await getColonyNetworkClient(\n    Network.Mainnet,\n    connectedWallet,\n    networkClientOptions\n  );\n\n  // Get the colony client instance for the betacolony\n  const colonyClient = await networkClient.getColonyClient(\n    MAINNET_BETACOLONY_ADDRESS\n  );\n  return colonyClient;\n};\n\nconst getDate = async (blockHash: string | undefined) => {\n  if (blockHash) {\n    const date = await getBlockTime(provider, blockHash);\n    return date;\n  } else {\n    return -1;\n  }\n};\n\nconst getAmount = (originalAmount: string) => {\n  const humanReadableAmount = new utils.BigNumber(originalAmount);\n  // Get a base 10 value as a BigNumber instance\n  const wei = new utils.BigNumber(10);\n\n  // The converted amount is the human readable amount divided by the wei value raised to the power of 18\n  const convertedAmount = humanReadableAmount.div(wei.pow(18));\n\n  // If you are confident that it's a low enough value, you can display it as an integer -- .toNumber()\n  // But to be on the safe side, you can also use it as a string\n  return convertedAmount.toString();\n};\n\nconst getColonyInitialisedData = () => {\n  return {\n    primary: { data: \"Congratulations! It's a beautiful baby colony!\" },\n  };\n};\n\nconst getColonyRoleSetData = (parsedEvent: LogDescription, event: Log) => {\n  const role = ColonyRole[parsedEvent.values.role];\n  const userAddress = event.address;\n  const domainId = new utils.BigNumber(parsedEvent.values.domainId).toString();\n\n  return {\n    primary: { role, userAddress, domainId },\n  };\n};\n\nconst getPayoutClaimedData = (parsedEvent: LogDescription, event: Log) => {\n  const userAddress = event.address;\n  const amount = getAmount(parsedEvent.values.amount);\n  const rewardPayoutId = new utils.BigNumber(\n    parsedEvent.values.fundingPotId\n  ).toString();\n  const token = parsedEvent.values.token;\n\n  return {\n    primary: { userAddress, amount, rewardPayoutId, token },\n  };\n};\n\nconst getDomainAddedData = (parsedEvent: LogDescription) => {\n  const domainId = new utils.BigNumber(parsedEvent.values.domainId).toString();\n\n  return {\n    primary: { domainId },\n  };\n};\n\nconst getSymbolFromToken = async (token: string) => {\n  if (TokenSymbolMapping[token]) {\n    return TokenSymbolMapping[token];\n  } else {\n    const API_KEY = \"EK-b3gZS-1FQnoyC-5GyNY\";\n    const tokenInfo: any = await apiService.get(\n      `https://api.ethplorer.io/getTokenInfo/${token}?apiKey=${API_KEY}`,\n      {}\n    );\n    if (tokenInfo) {\n      TokenSymbolMapping = { ...TokenSymbolMapping, [token]: tokenInfo.symbol };\n      saveTokenSymbolMap(TokenSymbolMapping);\n    }\n    return tokenInfo ? tokenInfo.symbol : undefined;\n  }\n};\n\nconst processEventLogsData = async (\n  eventLogs: Log[],\n  parsedLogs: LogDescription[]\n) => {\n  const data: Event[] = await Promise.all(\n    parsedLogs.map(async (event: LogDescription, index: number) => {\n      const date = await getDate(eventLogs[index].blockHash);\n\n      let finalEventData: Event = {\n        type: event.name,\n        secondary: date,\n        avatarSeed: eventLogs[index].address\n          ? eventLogs[index].address\n          : eventLogs[index].transactionHash,\n      };\n\n      switch (event.name) {\n        case EventTypes.ColonyInitialised:\n          finalEventData = {\n            ...finalEventData,\n            ...getColonyInitialisedData(),\n          };\n          break;\n        case EventTypes.ColonyRoleSet:\n          finalEventData = {\n            ...finalEventData,\n            ...getColonyRoleSetData(event, eventLogs[index]),\n          };\n          break;\n        case EventTypes.PayoutClaimed:\n          const claimedData = getPayoutClaimedData(event, eventLogs[index]);\n          const symbol = await getSymbolFromToken(claimedData.primary.token);\n          finalEventData = {\n            ...finalEventData,\n            ...claimedData,\n          };\n          finalEventData.primary.symbol = symbol;\n          break;\n        case EventTypes.DomainAdded:\n          finalEventData = {\n            ...finalEventData,\n            ...getDomainAddedData(event),\n          };\n          break;\n        default:\n          finalEventData = { ...finalEventData };\n      }\n      return finalEventData;\n    })\n  );\n\n  data.sort((a: Event, b: Event) => b.secondary - a.secondary);\n\n  return data;\n};\n\nconst getEventLogs = async () => {\n  const colonyClient: any = await getColonyClient();\n  // Get the filter\n  // There's a corresponding filter method for all event types\n  const eventFilter1 = colonyClient.filters.PayoutClaimed();\n  const eventFilter2 = colonyClient.filters.ColonyInitialised();\n  const eventFilter3 = colonyClient.filters.ColonyRoleSet();\n  const eventFilter4 = colonyClient.filters.DomainAdded();\n\n  // Get the raw logs array\n  const eventLogs: Log[] = [\n    ...(await getLogs(colonyClient, eventFilter1)),\n    ...(await getLogs(colonyClient, eventFilter2)),\n    ...(await getLogs(colonyClient, eventFilter3)),\n    ...(await getLogs(colonyClient, eventFilter4)),\n  ];\n\n  const parsedLogs: LogDescription[] = eventLogs.map((event) =>\n    colonyClient.interface.parseLog(event)\n  );\n\n  const eventLogsData = processEventLogsData(eventLogs, parsedLogs);\n  return eventLogsData;\n};\n\nexport default getEventLogs;\n","export const saveTokenSymbolMap = (data: { [key: string]: string }) => {\n  window.localStorage.setItem(\"tokenSymbolMap\", JSON.stringify(data));\n};\n\nexport const getTokenSymbolMap = () => {\n  const data = window.localStorage.getItem(\"tokenSymbolMap\");\n  if (data) {\n    return JSON.parse(data);\n  } else {\n    return {};\n  }\n};\n","import React from \"react\";\nimport EventsList from \"components/EventsList\";\nimport Event from \"interfaces/Event.interface\";\nimport getEventLogs from \"services/ColonyClient\";\nimport styles from \"./events.module.css\";\n\ninterface Props {}\n\ninterface State {\n  isLoading: boolean;\n  eventsList: Event[] | null;\n}\n\nexport default class Events extends React.Component<Props, State> {\n  state = {\n    isLoading: false,\n    eventsList: [],\n  };\n\n  async componentDidMount() {\n    this.setState({ isLoading: true });\n    getEventLogs().then(\n      (eventsList) => {\n        this.setState({ eventsList, isLoading: false });\n      },\n      (error) => {\n        this.setState({ eventsList: null, isLoading: false });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className={styles.container}>\n        {this.state.isLoading ? (\n          <div>Loading data...</div>\n        ) : this.state.eventsList ? (\n          <EventsList eventsList={this.state.eventsList} />\n        ) : (\n          <div>Uh oh! Failed to load data.</div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport styles from \"./app.module.css\";\nimport Events from \"./containers/Events/\";\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <Events />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"eventsList_container__2L_43\",\"list\":\"eventsList_list__18X-5\"};"],"sourceRoot":""}